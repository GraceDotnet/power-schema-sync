@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = "结构检查";
}
@section css{
    <style>
        .code-sql {
            font-family: cursive;
            font-size: .9rem;
        }
    </style>
}
<div id="app">
    <div v-loading.fullscreen.lock="fullscreenLoading" element-loading-text="正在比对..."></div>
    <!--第一步-->
    <el-container v-show="step == 1">
        <el-header>

        </el-header>
        <el-main>
            <!--上部分-->
            <el-table row-key="name" :data="tableData" style="width: 100%" highlight-current-row @@current-change="currentChange">
                @* <el-table-column type="selection" width="55"></el-table-column> *@
                <el-table-column prop="name" label="源对象" min-width="45%" sortable>
                    <template #default="scope">
                        {{ scope.row.name }}
                    </template>
                </el-table-column>
                <el-table-column prop="operate" label="操作" min-width="10%" sortable>
                    <template #default="scope">
                        <div :title="scope.row.operate">
                            <el-icon v-if="scope.row.operate=='Edit'"><Right /></el-icon>
                            <el-icon v-if="scope.row.operate=='Delete'"><Close></Close></el-icon>
                            <el-icon v-if="scope.row.operate=='None'"><Check></Check></el-icon>
                            <el-icon v-if="scope.row.operate=='Created'"><Plus></Plus></el-icon>
                        </div>
                    </template>
                </el-table-column>
                <el-table-column prop="name" label="目标对象" min-width="45%" sortable>
                    <template #default="scope">
                        <div v-if="scope.row.operate!=''">{{ scope.row.name }}</div>
                        <div else="scope.row.operate!=''"></div>
                    </template>
                </el-table-column>
            </el-table>
            <!--下部分-->
            <div>
                <div><h3>部署脚本</h3></div>
                <div class="sql-container">
                    <div v-if="currentRow.syncSql">
                        <div class="code-sql"> {{currentRow.syncSql}}</div>
                    </div>

                    <div v-if="currentRow.type=='table'">
                        <div class="code-sql" v-for="sql in currentRow.syncSqls">
                            {{sql}}
                        </div>
                    </div>
                </div>
            </div>
        </el-main>
    </el-container>
    <!--第二步-->
    <el-container v-show="step == 2">
        <el-main>
            <div><h3>部署脚本</h3></div>
            <div class="sql-container">
                <div class="code-sql">
                    SET FOREIGN_KEY_CHECKS=0;
                </div>

                <template v-for="item in allTables">
                    <div class="code-sql" v-for="sql in item.syncSqls">
                        {{sql}}
                    </div>
                </template>

                <div class="code-sql">
                    SET FOREIGN_KEY_CHECKS=1;
                </div>
            </div>
        </el-main>
    </el-container>
    <el-divider></el-divider>
    <el-footer>
        <el-row class="mb-4">
            <el-button v-show="step == 1" type="primary" @@click="step = 2">部署</el-button>
            <el-button v-show="step == 2" type="primary" @@click="step = 1">上一步</el-button>
            <el-button v-show="step == 2" type="primary" @@click="run">运行</el-button>
            <el-button type="info" @@click="reDiff">重新比对</el-button>
        </el-row>
    </el-footer>
</div>

@section js{
    <script>
        const app = Vue.createApp(
            {
                components: ElementPlusIconsVue,
                data() {
                    return {
                        step: 1,
                        tableData: [],
                        diffResult: {},
                        fullscreenLoading: false,
                        currentRow: {}
                    };
                },
                computed: {
                    allTables() {
                        var res = [];
                        for (const groud of this.tableData) {
                            res = res.concat(groud.children)
                        }

                        return res;
                    }
                },
                methods: {
                    run() {
                        let that = this;
                        axios.post('/api/Sync/exec' + location.search, {
                            ...this.diffResult
                        })
                            .then(function (response) {
                                console.log(response);
                            })
                            .catch(function (error) {
                                that.$message.error(error.response.data);
                            });
                    },
                    currentChange(row) {
                        console.log(row)
                        this.currentRow = row;
                    },
                    grouedTables(tables) {
                        const groupedBy = {};

                        for (const item of tables) {
                            if (groupedBy[item.operate]) {
                                groupedBy[item.operate].push(item);
                            } else {
                                groupedBy[item.operate] = [item];
                            }
                        }

                        var res = [];
                        for (const item of Object.keys(groupedBy)) {
                            let children = [];
                            for (const table of groupedBy[item]) {

                                var syncSqls = [];
                                for (const column of table.columns) {
                                    syncSqls.push(column.syncSql);
                                }

                                for (const index of table.indexs) {
                                    syncSqls.push(index.syncSql);
                                }

                                children.push({
                                    type: 'table',
                                    name: table.tableName,
                                    operate: table.operate,
                                    syncSqls: syncSqls,
                                    children: table.columns.concat(table.indexs)
                                })
                            }

                            res.push({
                                type: 'group',
                                name: item == "Edit" ? "要修改的对象" : item == "None" ? "没有操作" : item == "Delete" ? "要删除的对象" : item == "Created" ? "要创建的对象" : "",
                                operate: "",
                                children: children
                            });
                        }
                        return res;
                    },
                    toDiff() {
                        location.href = `/home/SyncCheck`;
                    },
                    getDiff() {
                        this.step = 1;
                        this.fullscreenLoading = true;
                        axios.get('/api/Sync/diff' + location.search).then(res => {
                            this.diffResult = res.data

                            this.tableData = this.grouedTables(this.diffResult.tables);
                            console.log(this.tableData)
 
                            this.fullscreenLoading = false;
                        }).catch(err => {
                            this.fullscreenLoading = false;
                            this.$message.error(err.message || err.response.data);
                        })
                    },
                    reDiff() {
                        this.getDiff();
                    }
                },
                mounted() {
                    this.getDiff();
                }
            }).use(ElementPlus).mount("#app");
    </script>
}